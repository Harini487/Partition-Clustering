library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
install.packages("pacman")
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
library(datasets)  # Load/unload base packages manually
library(datasets)  # Load/unload base packages manually
detach("package:datasets", unload = TRUE)  # For base
library(datasets)  # Load/unload base packages manually
head(iris)
?plot  # Help for plot()
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot(iris)  # Entire data frame
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3)
# Formula plot with options
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
library(datasets)
?mtcars
head(mtcars)
barplot(mtcars$cyl)             # Doesn't work
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
library(datasets)
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
# Restore graphic parameter
par(mfrow=c(1, 1))
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
?mtcars
head(mtcars)
# Good to first check univariate distributions
hist(mtcars$wt)
hist(mtcars$mpg)
# Basic X-Y plot for two quantitative variables
plot(mtcars$wt, mtcars$mpg)
?mtcars
head(mtcars)
?mtcars
# Good to first check univariate distributions
hist(mtcars$wt)
hist(mtcars$mpg)
# Basic X-Y plot for two quantitative variables
plot(mtcars$wt, mtcars$mpg)
# Add some options
plot(mtcars$wt, mtcars$mpg,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
# Annual Canadian Lynx trappings 1821-1934
?lynx
head(lynx)
# Default
hist(lynx)
# Add some options
hist(lynx,
breaks = 14,          # "Suggests" 14 bins
freq   = FALSE,       # Axis shows density, not freq.
col    = "thistle1",  # Color for histogram
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 2)
lines(density(lynx, adjust = 3), col = "purple", lwd = 2)
# Add a rug plot
rug(lynx, lwd = 2, col = "gray")
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
head(iris)
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych)
head(iris)
# Get info on package
p_help(psych)           # Opens package PDF in browser
p_help(psych, web = F)  # Opens help in R Viewer
describe(iris$Sepal.Length)  # One quantitative variable
describe(iris)               # Entire data frame
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# Clear environment
rm(list = ls())
detach("package:datasets", unload = TRUE)   # For base
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
head(iris)
hist(iris$Petal.Length)
summary(iris$Petal.Length)
summary(iris$Species)  # Get names and n for each species
# Versicolor
hist(iris$Petal.Length[iris$Species == "versicolor"],
main = "Petal Length: Versicolor")
# Virginica
hist(iris$Petal.Length[iris$Species == "virginica"],
main = "Petal Length: Virginica")
# Setosa
hist(iris$Petal.Length[iris$Species == "setosa"],
main = "Petal Length: Setosa")
# Short petals only (all Setosa)
hist(iris$Petal.Length[iris$Petal.Length < 2],
main = "Petal Length < 2")
# Short Virginica petals only
hist(iris$Petal.Length[iris$Species == "virginica" &
iris$Petal.Length < 5.5],
main = "Petal Length: Short Virginica")
# Format: data[rows, columns]
# Leave rows or columns blank to select all
i.setosa <- iris[iris$Species == "setosa", ]
head(i.setosa)
hist(i.setosa$Petal.Length)
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
is.vector(v1)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
# Give data, then dimensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
dfa <- cbind(vNumeric, vCharacter, vLogical)#cbind - column bind(To combine them into a single data frame and call it dfa)
dfa  # Matrix of one data type
dfa <- cbind(vNumeric, vCharacter, vLogical)#cbind - column bind(To combine them into a single data frame and call it dfa)
(x1 <- 1:3)
(y  <- 1:9)
(x1 <- 1:3)
(y  <- 1:9)
# Combine variables
(df1 <- cbind.data.frame(x1, y))
typeof(df1$x1)
str(df1)
(x2  <- as.factor(c(1:3)))
(df2 <- cbind.data.frame(x2, y))
typeof(df2$x2)
str(df2)
x3  <- c(1:3)
df3 <- cbind.data.frame(x3, y)
(df3$x3 <- factor(df3$x3,
levels = c(1, 2, 3)))
typeof(df3$x3)
str(df3)
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# From the official R documentation
browseURL("http://j.mp/2aFZUrJ")
# TXT
rio_txt <- import("~/Desktop/mbb.txt")
# CSV
rio_csv <- import("~/F:/R/mbb.csv")
# CSV
rio_csv <- import("F:/R/mbb.csv")
head(rio_csv)
vehicles_original <- read_csv("vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
# TXT
rio_txt <- import("F:/R/mbb.txt")
head(rio_txt)
# Excel XLSX
rio_xlsx <- import("F:/R/mbb.xlsx")
head(rio_xlsx)
# Excel XLSX
vehicles_xlsx <- import("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
head(vehicles_xlsx)
?View
View(rio_csv)
vehicles = read_excel("vehicles.xlsx")
vehicles = read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
library("readxl")
library("ggplot2")
vehicles = read.excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
view(vehicles)
View(vehicles)
vehicles = read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
View(vehicles)
# Excel XLSX
vehicles_xlsx <- import("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
head(vehicles_xlsx)
/vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")%>%
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")%>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")%>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
summary(vehicles_original)
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")%>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")%>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
vehicles_original <- read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
janitor::clean_names()
summary(vehicles_original)
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_csv("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
summary(vehicles_original)
vehicles_original %>%
pivot_longer(2:19,names_to = "labels") %>%
filter(class == "van") %>%
#mutate(class = fct_reorder(class,value,median)) %>%
ggplot(aes(class, value, fill = reorder(labels,value))) +
geom_boxplot() +
labs(title = "Outlier Detection for class: 'van'")
vehicles_original %>%
pivot_longer(2:19,names_to = "labels") %>%
filter(class == "van") %>%
#mutate(class = fct_reorder(class,value,median)) %>%
ggplot(aes(class, value, fill = reorder(labels,value))) +
geom_boxplot() +
labs(title = "Outlier Detection for class: 'van'")
vehicles_original <- read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
library(readxl)#To read the excel file
library(NbClust)#For finding cluster
library(knitr)
library(tidymodels)
library(factoextra)
library(flexclust)
library(caret)
library(funtimes)
vehicles_original <- read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
View(vehicles_xlsx)
summary(vehicles_original)
vehicles_original %>%
pivot_longer(2:19,names_to = "labels") %>%
filter(class == "van") %>%
#mutate(class = fct_reorder(class,value,median)) %>%
ggplot(aes(class, value, fill = reorder(labels,value))) +
geom_boxplot() +
labs(title = "Outlier Detection for class: 'van'")
vehicles_original %>%
pivot_longer(2:19,names_to = "labels") %>%
filter(class == "van") %>%
#mutate(class = fct_reorder(class,value,median)) %>%
ggplot(aes(class, value, fill = reorder(labels,value))) +
geom_boxplot() +
labs(title = "Outlier Detection for class: 'van'")
vehicles_original %>%
pivot_longer(2:19,names_to = "labels") %>%
filter(class == "bus") %>%
mutate(class = fct_reorder(class,value,median)) %>%
ggplot(aes(class, value, fill = reorder(labels,value))) +
geom_boxplot() +
labs(title = "Outlier Detection for class: 'bus'")
vehicles_original <- read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
vehicles_original <- read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx") %>%
janitor::clean_names() %>%
#https://www.rdocumentation.org/packages/janitor/versions/1.2.0/topics/clean_names
mutate(class = as_factor(class))
# read in the data
vehicle_data <- read_excel("../../vehicles.xlsx")
library(readxl)
library(factoextra)
library(NbClust)
library(caret)
library(ggplot2)
library(cluster)
# read in the data
vehicle_data <- read_excel("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW/vehicles.xlsx")
# any missing values?
sum(is.na(vehicle_data))
#import Libraries
library(xlsx)
library(factoextra)
library(NbClust)
library(fpc)
library(cluster)
getwd()
setwd("F:/IIT YEAR 2/MACHINE LEARNING AND DATA MINING/CW")
setwd("F:/GitHub/R - vehicles")
#Load the data set
loadfile <- read.xlsx(file = 'vehicles.xlsx', sheetIndex = 1, header = TRUE)
Dataset <- loadfile[2:20]
